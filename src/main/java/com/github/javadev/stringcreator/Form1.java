package com.github.javadev.stringcreator;

import com.github.underscore.lodash.$;
import java.awt.HeadlessException;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;

public class Form1 extends javax.swing.JFrame {
    private final Map<String, Object> data = new LinkedHashMap<>();
    
    public Form1() {
        initComponents();
        Path path = Paths.get("./data.json");
        if (Files.exists(path)) {
            try {
                data.putAll((Map<String, Object>) $.fromJson(
                    new String(Files.readAllBytes(path), "UTF-8")));
            } catch (Exception ex) {
                Logger.getLogger(Form1.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent winEvt) {
                data.put("templateData", new ArrayList<String>());
                for (int index = 0; index < jComboBox1.getModel().getSize(); index += 1) {
                    ((List<String>) data.get("templateData")).add(
                        String.valueOf(jComboBox1.getModel().getElementAt(index)).trim());
                }
                data.put("locationX", getLocation().x);
                data.put("locationY", getLocation().y);
                try {
                   Files.write(Paths.get("./data.json"), $.toJson(data).getBytes("UTF-8"));
                } catch (IOException ex) {
                    Logger.getLogger(Form1.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        if (data.get("templateData") != null) {
            fillComboBoxModel("templateData", jComboBox1);
        }
        final java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        if (data.get("locationX") instanceof Long && data.get("locationY") instanceof Long) {
            setLocation(Math.min(screenSize.width - 50, ((Long) data.get("locationX")).intValue()),
                    Math.min(screenSize.height - 50, ((Long) data.get("locationY")).intValue()));
        } else {
            final int x = (screenSize.width - getWidth()) / 2;
            final int y = (screenSize.height - getHeight()) / 2;
            setLocation(x, y);
        }
    }
    
    private void fillComboBoxModel(String key, JComboBox jComboBox) {
        final List<String> databaseData;
        if (data.get(key) == null || !(data.get(key) instanceof List)) {
            databaseData = new ArrayList<>();
        } else {
            databaseData = (List<String>) data.get(key);
        }
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        for (String dataItem : databaseData) {
            model.addElement(dataItem);
        }
        jComboBox.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new HistoryComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Программа для генерации строк из шаблона");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Шаблон предложения");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Новое предложение");

        jButton1.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        jButton1.setText("Получить новое предложение");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jTextField2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Маша {11} {243} и {243}." }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jMenu1.setMnemonic('\u0430');
        jMenu1.setText("Файл");

        jMenuItem1.setMnemonic('\u044b');
        jMenuItem1.setText("Выход");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('\u0441');
        jMenu2.setText("Справка");

        jMenuItem2.setMnemonic('\u043e');
        jMenuItem2.setText("О программе");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2)
                            .addComponent(jComboBox1, 0, 459, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        generateAndCopyString();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void generateAndCopyString() throws HeadlessException {
        String generatedString = generateString(String.valueOf(jComboBox1.getSelectedItem()));
        jTextField2.setText(generatedString);
        java.awt.datatransfer.StringSelection data = new java.awt.datatransfer.StringSelection(generatedString);
        getToolkit().getSystemClipboard().setContents(data, data);
    }

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
        
    }//GEN-LAST:event_jTextField2KeyPressed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        
    }//GEN-LAST:event_jButton1KeyPressed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        About dialog = new About(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        generateAndCopyString();
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    public String generateString(String input) {
        final Map<String, List<String>> replaces;
        if (data.get("replaces") == null) {
             replaces = new LinkedHashMap<String, List<String>>() { {
                put("11", Arrays.asList("ела", "кушала", "лопала"));
                put("243", Arrays.asList("кашу", "гречку", "суп", "котлету", "рис"));
            } };
        } else {
            replaces = (Map<String, List<String>>) data.get("replaces");
        }
        Map<String, Integer> wordsCounts = new LinkedHashMap<>();
        Pattern regex = Pattern.compile("\\{\\d+[\\},:]", Pattern.CASE_INSENSITIVE);
        final Matcher matcher = regex.matcher(input);
        List<Map<String, Object>> markerPositions = new ArrayList<>();
        while (matcher.find()) {
            final String value = matcher.group();
            final String id = value.substring(1, value.length() - 1);
            final List<String> arr = replaces.get(id);
            final int count;
            if (wordsCounts.get(id) == null) {
                count = 0;
            } else {
                count = wordsCounts.get(id);
            }
            wordsCounts.put(id, count + 1);
            if (arr != null && count < arr.size()) {
                markerPositions.add(new LinkedHashMap<String, Object>() { {
                    put("start", matcher.start());
                    put("end", matcher.end());
                    put("newWord", shuffle(arr, count));
                } });
            }
        }
        StringBuilder result = new StringBuilder(input);
        int correctIndex = 0;
        for (Map<String, Object> item : markerPositions) {
            result.replace(correctIndex + (Integer) item.get("start"),
                    correctIndex + (Integer) item.get("end"), (String) item.get("newWord"));
            correctIndex += ((String) item.get("newWord")).length()
                    - (Integer) item.get("end") + (Integer) item.get("start");
        }
        return result.toString();
    }

    private String shuffle(List<String> arr, int i) {
        int j = new java.util.Random().nextInt(arr.size() - i) + i;
        String temp = arr.get(i);
        arr.set(i, arr.get(j));
        arr.set(j, temp);
        return arr.get(i);
    }
}
